name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libjpeg-dev libpng-dev libfreetype6-dev

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov

    - name: Set up environment variables
      run: |
        echo "DEMO_MODE=true" >> $GITHUB_ENV
        echo "LOG_LEVEL=INFO" >> $GITHUB_ENV
        echo "DB_URL=sqlite:///./data/test.db" >> $GITHUB_ENV

    - name: Create test directories
      run: |
        mkdir -p data storage/downloads storage/transforms storage/thumbnails storage/proofs

    - name: Run linting
      run: |
        flake8 app/ tests/ --max-line-length=100 --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ tests/ --max-line-length=100 --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

    - name: Run type checking
      run: |
        mypy app/ --ignore-missing-imports --no-error-summary

    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: youtube-auto-upload:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        # Test that the image was built successfully
        docker images | grep youtube-auto-upload
        echo "Docker image built successfully"

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run security scan with Bandit
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ || true

    - name: Run dependency check
      run: |
        safety check --json --output safety-report.json || true
        safety check || true

  demo-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libjpeg-dev libpng-dev libfreetype6-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up demo environment
      run: |
        echo "DEMO_MODE=true" >> $GITHUB_ENV
        echo "LOG_LEVEL=DEBUG" >> $GITHUB_ENV

    - name: Create demo database
      run: |
        python scripts/create_demo_db.py

    - name: Test demo mode functionality
      run: |
        python -c "
        import os
        os.environ['DEMO_MODE'] = 'true'
        
        from app.config import get_settings
        from app.db import init_database
        from app.models import create_tables
        from app.ig_downloader import InstagramDownloader
        
        print('Testing demo mode...')
        
        # Initialize database
        settings = get_settings()
        init_database()
        
        # Test downloader in demo mode
        downloader = InstagramDownloader()
        downloads = downloader.download_all_targets()
        
        print(f'Demo pipeline completed successfully - downloaded {len(downloads)} videos')
        "

    - name: Test API endpoints
      run: |
        python -c "
        import requests
        import time
        import subprocess
        import signal
        import os
        
        # Start the application
        proc = subprocess.Popen(['python', '-m', 'app.main'], 
                              stdout=subprocess.PIPE, 
                              stderr=subprocess.PIPE)
        
        try:
            # Wait for app to start
            time.sleep(10)
            
            # Test health endpoint
            response = requests.get('http://localhost:8000/health', timeout=10)
            assert response.status_code == 200
            
            # Test status endpoint
            response = requests.get('http://localhost:8000/status', timeout=10)
            assert response.status_code == 200
            data = response.json()
            assert data['settings']['demo_mode'] == True
            
            # Test stats endpoint
            response = requests.get('http://localhost:8000/stats', timeout=10)
            assert response.status_code == 200
            
            print('All API tests passed!')
            
        finally:
            # Clean up
            proc.terminate()
            proc.wait(timeout=10)
        "


  performance-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libjpeg-dev libpng-dev libfreetype6-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust

    - name: Run performance tests
      run: |
        python -c "
        import time
        from app.utils import format_file_size, format_duration, clean_filename
        
        # Test utility functions performance
        start = time.time()
        
        for i in range(1000):
            format_file_size(1024 * 1024 * i)
            format_duration(i)
            clean_filename(f'test_file_{i}.mp4')
        
        end = time.time()
        print(f'Utility functions performance: {end - start:.2f} seconds')
        assert (end - start) < 1.0  # Should complete in under 1 second
        "

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build, security, demo-test, performance-test]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment commands here

    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke test commands here

    - name: Deploy to production
      if: success()
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands here
